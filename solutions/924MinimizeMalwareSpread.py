class Solution:
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        def bfs(node):
            source = node
            seen = set()
            queue = collections.deque()
            queue.append(node)
            seen.add(node)
            
            while queue:
                node = queue.popleft()
                if infected[node] == -sys.maxsize:
                    infected[node] = source
                else:
                    infected[node] = sys.maxsize
                
                for nxt in range(n):
                    if nxt not in seen and graph[node][nxt] == 1:
                        seen.add(nxt)
                        queue.append(nxt)

                        
        n = len(graph)
        infected = [-sys.maxsize] * n
        
        for node in initial:
            bfs(node)
            
        spread = collections.Counter(infected)
            
        ans, max_val = initial[0], spread[initial[0]]
        for node in initial[1:]:
            if spread[node] > max_val or (spread[node] == max_val and ans > node):
                max_val = spread[node]
                ans = node
        return ans     